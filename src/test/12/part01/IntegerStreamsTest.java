package part01;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static utils.StreamAssertions.assertStreamsEqual;

import java.util.List;
import java.util.stream.IntStream;

import org.junit.jupiter.api.Test;

public class IntegerStreamsTest {

    // the object to be tested
    private IntegerStreams solution = new IntegerStreams();

    @Test
    void testNumbersBetween() {
        IntStream numbersBetween = solution.numbersBetween(10, 100);

        assertNotNull(numbersBetween, "numbersBetween must return a stream");

        // convert the stream into a list for easier testing
        List<Integer> numbers = numbersBetween.boxed().toList();

        // check that the numbers are correct
        assertEquals(91, numbers.size());
        assertEquals(10, numbers.get(0));
        assertEquals(100, numbers.get(90));
    }

    @Test
    void testNumbersBetweenWhenFromAndToAreEqual() {
        IntStream answer = solution.numbersBetween(42, 42);

        assertStreamsEqual(IntStream.of(42), answer);
    }

    @Test
    void testSum() {
        IntStream numbers = IntStream.of(10, 20, 12);

        assertEquals(42, solution.sum(numbers), "sum method must return the sum of values in the stream");
    }

    @Test
    void testSumWhenStreamIsEmpty() {
        IntStream empty = IntStream.of();

        assertEquals(0, solution.sum(empty));
    }

    @Test
    void testCountNumbersInStream() {
        IntStream numbers = IntStream.of(10, 20, 12);

        // check that the size of the stream is correct
        assertEquals(3, solution.countNumbersInStream(numbers));

        // check that the method works with an empty stream
        assertEquals(0, solution.countNumbersInStream(IntStream.empty()));
    }

    /*
     * Why did the integer stream refuse to go to the party?
     *
     * Because it was sorted in ascending order and the party was looking for
     * something a bit more random!
     *
     * This joke was generated by ChatGPT 3.5
     */

}
